//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelAPP
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class Employee
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employee()
        {
            this.Accounts = new HashSet<Account>();
            this.CheckIns = new HashSet<CheckIn>();
            this.CheckOuts = new HashSet<CheckOut>();
            this.InComes = new HashSet<InCome>();
            this.ManageEmps = new HashSet<ManageEmp>();
            this.OutComes = new HashSet<OutCome>();
            hotelDB = new HotelDB();
        }
    
        public int Id { get; set; }
        public string fname { get; set; }
        public string lname { get; set; }
        public string CMND { get; set; }
        public Nullable<System.DateTime> bdate { get; set; }
        public Nullable<decimal> salary { get; set; }
        public byte[] avatar { get; set; }
        public Nullable<int> posId { get; set; }
        public string phone { get; set; }
        public string address { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Account> Accounts { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CheckIn> CheckIns { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<CheckOut> CheckOuts { get; set; }
        public virtual Position Position { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<InCome> InComes { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ManageEmp> ManageEmps { get; set; }
        public virtual ManageEmp ManageEmp { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OutCome> OutComes { get; set; }

        HotelDB hotelDB;
        
        public Employee getByID(int id)
        {
            try
            {
                Employee employee = (from e in hotelDB.Employees
                                     where e.Id == id
                                     select e).First();
                return employee;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getAllEmp()
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByPhone(string phone)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.phone.Trim().Contains(phone)
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByAddress(string address)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.address.Trim().Contains(address)
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByCMND(string cmnd)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.CMND.Trim().Contains(cmnd)
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByFname(string fname)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.fname.Trim().Contains(fname)
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByLname(string lname)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.lname.Trim().Contains(lname)
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByBirthDate(DateTime bdate)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.bdate == bdate
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getBySalary(decimal salary)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.salary == salary
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByPositionId(int posId)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            where emps.posId == posId
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public List<Employee> getByPosition(string posname)
        {
            try
            {
                var list = (from emps in hotelDB.Employees
                            join p in hotelDB.Positions on emps.posId equals p.posId
                            where p.posName == posname
                            select emps).ToList();
                return list;
            }
            catch (Exception)
            {

                throw;
            }
        }
    }
}
